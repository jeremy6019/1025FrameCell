

**selenium
=>웹앱을 테스트 하기 위한. 프레임 워크 
=>프로그래밍 언어에서 제공하는 웹의 내용을 가져오는 클래스나 함수들으 정적으로
웹의 내용을 가져옵니다. 
처음 접속할 때 출력하는 내용만 가져올 수 있습니다. 
따라서 로그인을 해야 보여지는 데이터나 ajax처럼 어떤 이벤트를 수행해서 데이터를 
가져오는 경우에는 내용을 가져올 수가 없습니다. 

=>selenium은 WebDrier라는 API를 이용해서 브라우저를 직접 구동시켜 줍니다,. 
크롬,파이어폭스,IE,오페라,팬텀(일반 브라우저가 아니고 메모리 브라우저)등의 브라우저를 
제어할 수 있습니다. 
특정 요소에게 자바스크립트 이벤트(입력, 클릭, submit 등)를 발생시킬 수도 있습니다. 

1.사용 준비 
1)selenium라이브러리를 다운로드 
=>직접 다운로드: https://www.seleniumhq.org에서 다운로드 
=>maven을 이용해서 설정 가능 
  
2)제어할 브라우저의 드라이버를 다운로드 
=>직접 다운로드 
=>크롬의 경우는 https://sites.google.com/a/chromium.org/chromedriver/
downloads에서 자신의 버전에 맞는 드라이버 다운로드 

2.브라우저를 실행시켜 사이트 접속 
=> 사용할 드라이버와 드라이버 파일의 위치를 프로퍼티로 설정 
system.setProperty(사용할 드라이버 이름, 드라이버 파일 위치 설정);
=>크롬 드라이버를 c:\드라이버에 위치시킨 경우 
system.setProperty("webdriver.chrome.driver", "c:\chromedriver.exe");

=>WebDriver객체를 생성해서 접속 
WebDriver driver = new ChromeDriver();//크롬 실행 
driver.get(String url);//url에 접속 
driver.getPageSource();//html을 리턴 

3.https://www.daum.net의 html코드를 Selenium이용해서 가져오기 
1)자신의 크롬 정보를 확인 
=>크롬을 실행시키고 오른쪽의 ...을 누르고 [도움말]-[크롬정보]를 실행 
 버전- 78.0.3904.70
=>드라이버 버전이 맞지 않으면 크롬이 실행이 안됩니다. 

2)버전에 맞는 크롬 드라이버를 다운로드 
=>www,google.com에서 크롬 드라이버로 검색해도되고 https://chromedriver.chromium.org
/downloads 
=>mac의 경우는 brew install chromedriver로도 설치 가능 

3)java application을 생성 

4)maven project로 변환 

5)pom.xml파일에 selenium을 사용할 수 있도록 dependency를 추가 
<dependencies>
  <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
   <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>3.141.59</version>
   </dependency>
</dependencies>

6)소스코드 작성 
package selenium;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class NaverHTML {

	public static void main(String[] args) {
		
		try {
			//드라이버 위치 등록 
			System.setProperty("webdriver.chrome.driver", 
					"/Users/a503-22/Downloads/chromedriver");
			//크롬 실행 
			WebDriver driver =
					new ChromeDriver(); 
			//사이트 접속 
		    driver.get("https://www.daum.net");
		    //html을 가져와서 출력 
		    System.out.printf("%s\n",
		    		driver.getPageSource());
			
			
		}catch(Exception e) {
			 System.out.printf(
				   	"크롬 실행 오류:%s\n",
					e.getMessage());
		}
		
		
	}
}

4.WebDriver의 메소드 

1)get(String url): url에 접속 

2)close():브라우저 종료 

3)getPageSource():접속한 URL의 html을 문자열로 리턴 

4)원하는 Element찾기 
=>1개의 Element찾아오는 메소드 
findElement(By.id 또는 By.xpath(id또는 xpath))

=>Element의 List를 찾아오는 메소드 
findElements(By.name 또는 class 또는 tagName(name이나 class 또는 
tagName))

=>Element를 찾은 후 sendKeys(String value)를 호출하면 값이 대입됩니다. 
click()이나 submit()을 호출하면 버튼을 누르거나 폼의 데이터를 전송합니다. 

5)frame:하나의 페이지를 영역별로 구분해서 다른 내용을 출력하기 위한 영역 
프레임 전환:switchRo.frame(frame Element)

6)크롬 창을 화면에 출력하지 않고 제어하기 
ChromeOption options = new ChromeOption(); 
options.addArguments("headless");
new ChromeDriver(options)로 생성하면 크롬을 화면에 출력하지 않고 작업 

7) daum까페에 접속해서 글 남기기 

6.Selenium은 데이터를 수집하기 위해서 사용하는 도구이지 html파싱을 위한 
것이 아닙니다, 
html파싱은 Jsoup가지고 합니다. 


**Java Swing 이나 AWT에서의 그래픽 출력 
1.GC(Graphic Context) 
=>줄여서 Context라고도 합니다. 
=>안드로이드에서는 화면에 출력하는 객체를 만들 때 Context가 매개변수로 대입 
되어야 합니다. 
=>화면 출력을 하려면 출력할 때의 색상, 선, 두께 , 폰트 등을 설정해야 하는데 이러한 
정보를 출력할 때 마다 설정할 수 없어서 출력하기 전에 이러한 설정들을 저장해 놓고 
재사용할 수 있도록 해주는 객체 

2.paint(Graphics g) 
=>화면에 출력되는 객체가 화면에 출력되기 직전이나 가려졌다가 다시 보여질 때 호출 
되는 메소드 
=>매개변수로 전달되는 Graphics객체를 가지고 그래픽을 출력합니다. 
=>메소드 이름과 클래스이름이 다를 뿐이지 VC++(Microsoft Foundation Class)
나 VC#, HTML5의 Canvas등에서 그래픽을 출력할 때도 동일합니다. 
=>paint메소드를 강제로 호출할 때는 repaint메소드나 paintComponent메소드를 
이용해서 가능 
=>그림을 그릴 떄는 JFrame위에 그려도 되지만 JPanel이나 Canvas를 배치하고 이위에 
그림을 그리는 경우가 많습니다. 

3.그리는 메소드: Graphics 객체 소유 
drawString(String str, int x, int y)
drawLine(int x1, int y1, int x2, int y2)
drawRect(intx,int y, int width, int height)
drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)

drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2,
int sy2, ImageObserver observer)
=>원본에서 뒤의 4개 숫자에 해당하는 크기를 잘라서 앞의 4의 숫자에 출력 

4. 설정하는 메소드 
setFont 
setColor 

5. 스윙의 프레임에 그래픽 출력하기 
1)JFrame으로부터 상속받는 클래스를 생성하기 
package graphic;

import java.awt.Graphics;

import javax.swing.JFrame;

public class MyFrame extends JFrame {

	public MyFrame() {
	   
		setTitle("그래픽 출력");
		setBounds(0,0,300,300);
		setDefaultCloseOperation(
				EXIT_ON_CLOSE);
		setVisible(true);
		System.out.printf("생성자\n");
	}
	@Override
	public void paint(Graphics g) {
		g.drawString("안녕하세요", 100, 90);
		g.drawRect(100, 100, 100, 50);
	}
}

2)main메소드를 소유한 클래스를 생성해서 코드 추가 
NEW MYFRAME();

6. 버튼을 눌러서 색상 변경 
1)JPanel을 상속받는 클래스를 생성하고 paint메소드를 재정의  
package graphic;

import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JPanel;

public class MyPanel extends JPanel {

	public Color color = 
			new Color(0,0,128); 
	public void onPaint(Graphics g) {
		g.setColor(color);
		g.drawString("색상변경", 50, 50);
	}
	
}

2.JFrame으로 상속받는 클래스를 생성하고 작성 


**그래픽 출력 
=>그래픽 출력을 일반 프로그래밍 언어의 API를 사용하게 되면 운영체제에게 명령어를 
전달을 해서 운영체제가 하드웨어를 이용해서 출력합니다. 
=>이 떄 그래픽 출력을 빠르게 하기 위해서 사용하는 기술로 MS는 Direct X 이고 그 이
외의 진영은 Open GL 그리고 스마트폰은 Open GL ES웹에서는 Web GL기술을 
이용합니다. 
이 기술들은 운영체제의 명령어로 그래픽을 출력 
iOS는 자체 제작한 SpriteKit을 이용하는 것이 출력속도가 빠릅니다. 
=>그래픽 가속 기술을 사용하는 것이 어려워서(스레드를 사용해서 작업) 쉽게 구현해 주는 
API(그래픽 엔진)를 사용하는 경우가 많습니다. 
=>이러한 그래픽 엔진으로 유명한 것이 Unity(C#), Unreal(C++) 
=>SpriteImage:여러 개의 그림을 모아서 하나로 만든 image 
비슷한 용도로 사용되는 이미지들은 하나로 묶어서 분할해서 출력하는 것이 좋습니다. 
































































